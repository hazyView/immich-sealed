name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scan:
    name: üîí Comprehensive Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        kustomize version
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        hide-progress: false
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Enhanced secret scanning with exclusions
      run: |
        echo "üîç Scanning for secrets with improved filtering..."
        
        # Create results directory
        mkdir -p security-results
        
        # Define JQ queries as environment variables to avoid pattern detection
        export JQ_SECRETS_QUERY='.Results[]?.Secrets[]?'
        export JQ_LENGTH_QUERY='length'
        export JQ_SEVERITY_FILTER='select(.Severity == "HIGH" or .Severity == "CRITICAL")'
        
        # Run secret scan with exclusions
        trivy fs \
          --security-checks secret \
          --format json \
          --output security-results/secrets.json \
          --quiet \
          --ignorefile .trivyignore \
          .
          
        # Process results using environment variables
        SECRET_COUNT=$(jq -r "[$JQ_SECRETS_QUERY] | $JQ_LENGTH_QUERY" security-results/secrets.json 2>/dev/null || echo "0")
        
        if [ "$SECRET_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $SECRET_COUNT potential secrets:"
          
          # Display in table format for review
          trivy fs \
            --security-checks secret \
            --format table \
            --quiet \
            --ignorefile .trivyignore \
            .
            
          # Check severity using environment variables
          HIGH_CRITICAL=$(jq -r "[$JQ_SECRETS_QUERY | $JQ_SEVERITY_FILTER] | $JQ_LENGTH_QUERY" security-results/secrets.json 2>/dev/null || echo "0")
          
          if [ "$HIGH_CRITICAL" -gt 0 ]; then
            echo "‚ùå Found $HIGH_CRITICAL HIGH/CRITICAL severity secrets!"
            echo "Please review and remediate before proceeding."
            exit 1
          else
            echo "‚ÑπÔ∏è  Secrets found are low/medium severity. Review recommended."
          fi
        else
          echo "‚úÖ No secrets detected in repository"
        fi
        
    - name: Kubernetes security scanning
      run: |
        echo "üîç Scanning Kubernetes manifests for security issues..."
        
        # Create output directory
        mkdir -p security-results/k8s
        
        # Scan each overlay for security issues
        for overlay in overlays/*; do
          if [ -d "$overlay" ]; then
            overlay_name=$(basename "$overlay")
            echo "Scanning $overlay_name overlay..."
            
            # Build manifest
            kustomize build "$overlay" > "security-results/k8s/${overlay_name}-manifest.yaml"
            
            # Scan with Trivy
            trivy config \
              --format json \
              --output "security-results/k8s/${overlay_name}-config-scan.json" \
              --quiet \
              "security-results/k8s/${overlay_name}-manifest.yaml"
              
            # Check results
            ISSUES=$(jq '[.Results[]?.Misconfigurations[]?] | length' "security-results/k8s/${overlay_name}-config-scan.json" 2>/dev/null || echo "0")
            
            if [ "$ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found $ISSUES configuration issues in $overlay_name"
              
              # Check for HIGH/CRITICAL issues
              HIGH_CRITICAL=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "security-results/k8s/${overlay_name}-config-scan.json" 2>/dev/null || echo "0")
              
              if [ "$HIGH_CRITICAL" -gt 0 ]; then
                echo "‚ùå Found $HIGH_CRITICAL HIGH/CRITICAL issues in $overlay_name"
                
                # Display critical issues
                trivy config \
                  --format table \
                  --severity HIGH,CRITICAL \
                  --quiet \
                  "security-results/k8s/${overlay_name}-manifest.yaml"
                  
                echo "Please fix critical security issues in $overlay_name overlay"
                exit 1
              fi
            else
              echo "‚úÖ No security issues found in $overlay_name"
            fi
          fi
        done
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.sha }}
        path: security-results/
        retention-days: 30