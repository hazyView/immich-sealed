apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb
  namespace: immich
data:
  01-init.sql: |
    CREATE EXTENSION IF NOT EXISTS vector;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS cube;
    CREATE EXTENSION IF NOT EXISTS earthdistance;
    CREATE EXTENSION IF NOT EXISTS ltree;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: immich-postgresql-pgvector
  namespace: immich
spec:
  serviceName: immich-postgresql-pgvector
  replicas: 1
  selector:
    matchLabels:
      app: immich-postgresql-pgvector
  template:
    metadata:
      labels:
        app: immich-postgresql-pgvector
    spec:
      containers:
      - name: postgres
        image: pgvector/pgvector:pg15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: immich
        - name: POSTGRES_USER
          value: immich
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-postgresql-temp
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: initdb
        configMap:
          name: postgres-initdb
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql-pgvector
  namespace: immich
spec:
  selector:
    app: immich-postgresql-pgvector
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
